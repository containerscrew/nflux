[package]
name = "nflux"
version = "0.3.0"
edition = "2021"
license-file = "../LICENSE"
authors = ["containerscrew info@containerscrew.com"]
description = "Network monitoring tool & TLS/SSL sniffer using eBPF üêù"
repository = "https://github.com/containerscrew/nflux"

[dependencies]
nflux-common = { path = "../nflux-common/", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
libc = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal", "time"] }
tracing-subscriber = { version = "0.3.18", features = ["json"] }
tracing = "0.1.40"
bytes = "1.10.1"
dns-lookup = "2.0.4"
sysinfo = "0.34.2"
clap = { version = "4.5.37", features = ["derive"] }
chrono = "0.4.40"
colored = "3.0.0"
default-net = "0.22.0"

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }

cargo_metadata = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
# netrace-ebpf = { path = "../netrace-ebpf", version = "0.1.0" }
# tlstrace-ebpf = { path = "../tlstrace-ebpf", version = "0.1.0" }

[[bin]]
name = "nflux"
path = "src/main.rs"
