[package]
name = "nflux"
version = "0.12.7"
edition = "2024"
authors = ["containerscrew info@containerscrew.com"]
description = "Network monitoring tool & TLS/SSL sniffer using eBPF üêù"
repository = "https://github.com/containerscrew/nflux"
license.workspace = true

[dependencies]
nflux-common = { path = "../nflux-common/", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
libc = { workspace = true }
tokio = { workspace = true, features = ["full"] }
tracing-subscriber = { version = "0.3.20", features = ["json"] }
tracing = "0.1.40"
aya-log = "0.2.1"
dns-lookup = "3.0.0"
sysinfo = "0.37.1"
clap = { version = "4.5.48", features = ["derive"] }
chrono = "0.4.42"
default-net = "0.22.0"
colored = "3.0.0"
# containerd-client = "0.8.0"
# podman-api = "0.10.0"
# async-trait = "0.1.89"

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }

cargo_metadata = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.

[[bin]]
name = "nflux"
path = "src/main.rs"

[package.metadata.deb]
maintainer = "Daniels <info@containerscrew.com>"
copyright = "2025, Daniels <info@containerscrew.com>"
license-file = ["../LICENSE-GPL3"]
revision = "1"
extended-description = """
Simple network monitoring tool. Powered by eBPF üêù
"""
section = "utils"
priority = "optional"
assets = [
    ["target/release/nflux", "/usr/local/bin/", "755"],
    ["../LICENSE-GPL3", "/usr/share/doc/nflux/", "644"],
    ["../LICENSE-MIT", "/usr/share/doc/nflux/", "644"],
    # [
    #     "docs/usage.md",
    #     "/usr/share/doc/nflux/",
    #     "644",
    # ],
]
